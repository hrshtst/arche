########################################################################
### General settings

# Use a 256 color in tmux sessions. Note that this option is included
# in server options at least since tmux-2.0+.
set-option -sg default-terminal "screen-256color"

# Increase the maximum number of lines to hold for each window
# history. (Default: 2000)
set-option -g history-limit 20000

# Prevent tmux from waiting half a second before processing the ESC
# key, see: http://unix.stackexchange.com/a/25638/176805
set-option -sg escape-time 0

# Display messages on status line for 500 milliseconds.
set-option -g display-time 500

# Delete a pane immediately when the program running in it exits.
set-option -g remain-on-exit off

# Make time to allow multiple commands to be entered without pressing
# the prefix-key shorter than 500 milliseconds.
set-option -g repeat-time 300

# Allow tmux or a program in a pane to rename window name automatically.
set-option -wg allow-rename on
set-option -wg automatic-rename on

# Aggressively resize the chosen window to the size of smallest
# session. The window may resize when the current window changed on
# another session. Note that this option is unavailable on iTerm, see:
# https://github.com/tmux-plugins/tmux-sensible/issues/24
# if-shell '[[ ! "$TERM_PROGRAM" =~ ^iTerm ]]' "set-option -wg aggressive-resize on"
if-shell '! expr "$TERM_PROGRAM" : ^iTerm' "set-option -wg aggressive-resize on"
# NOTE: Bash style conditional expression in if-shell command seems not to work somehow...

# Set the client terminal title to reflect the current window in tmux
# session.
set-option -g set-titles on
set-option -g set-titles-string "#I:#W"

# Start index of window/pane with 1 instead of 0.
set-option -g base-index 1
set-option -wg pane-base-index 1

# Automatically renumber windows in numerical order when one is
# closed.
set-option -g renumber-windows on

########################################################################
### Tmux Plugin Manager

# Tmux Plugin Manager provides a way to manage installation and
# loading of Tmux Plugins, see:
# https://github.com/tmux-plugins/tpm
# The plugins are installed in ~/.config/tmux/tpm/plugins.
# Keybindings:
#   <prefix> Shift+I  Install new plugin(s)
#   <prefix> Shift+U  Update plugin(s)
#   <prefix> Alt+u    Remove/uninstall plugins not on the list
set-environment -g TMUX_PLUGIN_MANAGER_PATH "~/.config/tmux/plugins/"
set-option -g @plugin "tmux-plugins/tpm"

# Tmux sensible provides a set of tmux options that should be
# acceptable to everyone. For details, see:
# https://github.com/tmux-plugins/tmux-sensible
# Features that are activated with this are as follows:
#   - Use UTF-8
#   - Eliminate delay by pressing ESC
#   - Increase scrollback buffer size
#   - Increase time to display tmux messages
#   - Refresh status bar more often
#   - Set $TERM=screen-256color
#   - Use Emacs keybindings
#   - Bind sourcing ~/.tmux.conf to <prefix>+R
set-option -g @plugin "tmux-plugins/tmux-sensible"

########################################################################
### Mouse integration

# Enable mouse support.
set-option -g mouse on

# Enable a mouse wheel move in pane up and down, see:
# https://unix.stackexchange.com/a/318285
bind-key -n WheelUpPane if-shell -F -t= "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
bind-key -n WheelDownPane select-pane -t= \; send-keys -M
bind-key -n C-WheelUpPane select-pane -t= \; copy-mode -e \; send-keys -M
bind-key -T copy-mode-emacs C-WheelUpPane   send-keys -X halfpage-up
bind-key -T copy-mode-emacs C-WheelDownPane send-keys -X halfpage-down

########################################################################
### Keybindings

# Use C-z instead of C-b as prefix key.
unbind-key C-b
set-option -g prefix C-z
bind-key C-z send-prefix

## Navigation through panes.

# Select a pane on the left.
bind-key h select-pane -L
bind-key Left select-pane -L

# Select a pane below.
bind-key j select-pane -D
bind-key Down select-pane -D

# Select a pane above.
bind-key k select-pane -U
bind-key Up select-pane -U

# Select a pane on the right.
bind-key l select-pane -R
bind-key Right select-pane -R

# Select the most recently used pane.
bind-key -n C-t last-pane

# Display pane IDs on each pane, and select one.
bind-key -n M-o display-panes -d 0

## Resizing panes.

# Resize 5 cells to the left.
bind-key -r H resize-pane -L 5

# Resize 5 cells in the down.
bind-key -r J resize-pane -D 5

# Resize 5 cells in the up.
bind-key -r K resize-pane -U 5

# Resize 5 cells to the right.
bind-key -r L resize-pane -R 5

## Splitting panes.

# Split current pane horizontally.
bind-key "|" split-window -h -c "#{pane_current_path}"
bind-key "%" split-window -h -c "#{pane_current_path}"

# Split current pane full width horizontally.
bind-key "\\" split-window -fh -c "#{pane_current_path}"

# Split current pane vertically.
bind-key "-" split-window -v -c "#{pane_current_path}"
bind-key '"' split-window -v -c "#{pane_current_path}"

# Split current pane full width vertically.
bind-key "_" split-window -fv -c "#{pane_current_path}"

## Swapping panes.

# Swap the current pane for the next one, leaving the current pane
# active.
bind-key -n F2 swap-pane -D -d

# Swap the current pane for the next one, but the cursor goes with the
# pane in which it was.
bind-key -n S-F2 swap-pane -D

## Deleting panes.

# Destroy the current pane.
bind-key 0 kill-pane

## Navigation through windows.

# Select the last previously selected window of the current session.
bind-key Space last-window

## Creating windows.

# Open a new window in the same directory as the current pane.
bind-key c new-window -c "#{pane_current_path}"

# Open a new window with a specific name.
bind-key C new-window -c "#{pane_current_path}"\; command-prompt -I "#{window_name}" "rename-window '%%'"

# Insert a new window at a specified location.
# Adapted from http://superuser.com/a/704551/326239
bind-key i command-prompt -p 'Insert window at:' '  \
    run-shell "                                     \
        if tmux select-window -t %1; then           \
            tmux new-window -a;                     \
            tmux swap-window -s %1 -t \$((%1+1));   \
        else                                        \
            tmux new-window;                        \
            tmux move-window -t %1;                 \
        fi;                                         \
        tmux select-window -t #{window_id};         \
        tmux select-window -t %1;                   \
    "'

## Renaming windows.

# Rename the current window.
bind-key . command-prompt -I "#{window_name}" "rename-window '%%'"

## Selecting windows.

# Switch to a specified window with its index.
bind-key , command-prompt -p "switch to window (index):" "select-window -t ':%%'"

## Swapping windows.

# Move current window one position to the left.
bind-key -r C-h swap-window -t -1

# Move current window one position to the right.
bind-key -r C-l swap-window -t +1

## Deleting windows.

# Kill the current window.
bind-key C-k kill-window
bind-key x kill-window

## Linking a window.

# Link a specific window to the next to the current window.
bind-key "&" command-prompt -p "Link window from (session:window):" "link-window -s %% -a"

## Operations on a session.

# Create a new session
bind-key C-c new-session

# Rename the current session.
bind-key ">" command-prompt -I "#{session_name}" "rename-session '%%'"

# Switch to a specified session.
bind-key "<" command-prompt -p "switch to session:" "switch-client -t '%%'"

# Kill the current session.
bind-key Q confirm-before -p "kill-session #S? (y/n)" kill-session

# Detach from session.
bind-key d detach-client
bind-key D if-shell -F '#{session_many_attached}' \
    'confirm-before -p "Detach other clients? (y/n)" "detach-client -a"' \
    'display "Session has only 1 client attached"'

## Miscellaneous.
bind-key -n C-g refresh-client -S\; send-keys C-g

########################################################################
### Window monitoring for activity and silence

# Display a message instead of a bell in a window except for the
# current one that monitoring for activity is enabled.
set-option -g visual-activity on
set-option -g activity-action other

# Display a message instead of a bell in any window that monitoring
# for a bell is enabled.
set-option -g visual-bell off
set-option -g bell-action any

# Display a message instead of a bell in a window except for the
# current one that monitoring for silence is enabled.
set-option -g visual-silence on
set-option -g silence-action other

# Enable monitoring for activity and bell by default.
set-option -wg monitor-activity on
set-option -wg monitor-bell on

# Toggle window monitoring for activity in the current window.
bind-key m set-option -w monitor-activity \; display-message 'Monitor window activity [#{?monitor-activity,ON,OFF}]'

# Set interval in seconds to monitor for silence in the current
# window. If it is enabled already, disable the monitoring.
bind-key M if-shell -F '#{monitor-silence}' \
    'set-option -w monitor-silence 0 ; display-message "Monitor window silence [OFF]"' \
    'command-prompt -p "Monitor silence: interval (s)" "set-option -w monitor-silence %%"'

# Hide status bar on demand.
bind-key C-s if-shell -F '#{==:#{status},0}' 'set-option status on' 'set-option status off'


########################################################################
### Appearance and status bar

# Color definitions.
color_status1_fg="colour253"    # Grey85
color_status1_bg="colour235"    # Grey15
color_status1_hl="colour121"    # PaleGreen1
color_status2_fg="colour251"    # Grey78 (silver)
color_status2_bg="colour238"    # Grey27
color_status2_hl="colour222"    # LightGoldenrod2
color_status3_fg="colour232"    # Grey3
color_status3_bg="colour154"    # GreenYellow
color_status3_hl="colour020"    # Blue3

color_level_ok="colour076"      # Chartreuse3 (green)
color_level_warn="colour220"    # Gold1 (yellow)
color_level_stress="colour160"  # Red3

color_mode_highlight_fg="colour232"  # Grey3
color_mode_highlight_bg="colour134"  # MediumOrchid (purple)

color_active_pane_border="colour076" # Chartreuse3 (green)
color_pane_border="colour251"        # Grey78 (silver)

color_window_off_indicator="colour088"         # DarkRed
color_window_off_status_fg="colour015"         # White
color_window_off_status_bg="colour238"         # Grey27
color_window_off_status_current_bg="colour254" # Grey89

# Powerline separator
separator_powerline1_left=""
separator_powerline1_right=""
separator_powerline2_left=""
separator_powerline2_right=""

# General settings for status line.
set-option -g status on
set-option -g status-interval 1
set-option -g status-position bottom
set-option -g status-justify left
set-option -g status-right-length 100

# Color style for copy-mode indication.
set-option -g mode-style "fg=$color_mode_highlight_fg,bg=$color_mode_highlight_bg"

# Color style for message and command prompt.
set-option -g message-style "fg=$color_status2_hl,bg=$color_status2_bg"
set-option -g message-command-style "fg=$color_status2_hl,bg=$color_status2_bg"

# Default color style for status line
set-option -g status-style "fg=$color_status1_fg,bg=$color_status1_bg"

# Color style for window segments
set-option -wg window-status-separator ""

# Color style and format for windows except for the current one.
set-option -wg window-status-style "fg=$color_status1_fg,bg=$color_status1_bg"
set-option -wg window-status-format " #I #W#{?window_flags,#{window_flags}, } "

# Color style and format for the current window.
set-option -wg window-status-current-style "fg=$color_status2_hl,bold,bg=$color_status2_bg"
set-option -wg window-status-current-format "\
#{?window_start_flag,#[fg=$color_status3_bg],#[fg=$color_status1_bg]}#[bg=$color_status2_bg]$separator_powerline1_right\
#[#{window-status-current-style}] #I  #W#{?window_flags,#{window_flags}, } \
#[fg=$color_status2_bg,bg=$color_status1_bg]$separator_powerline1_right"

# Color style for windows in which activity or bell has been detected.
set-option -wg window-status-activity-style "fg=$color_status1_hl"
set-option -wg window-status-bell-style "fg=$color_status1_hl"

# Color style for border lines of panes.
set-option -wg pane-active-border-style "fg=$color_active_pane_border"
set-option -wg pane-border-style "fg=$color_pane_border"

# Define default color schemes.
default_color_status1="#[fg=$color_status1_fg,bg=$color_status1_bg]"
default_color_status2="#[fg=$color_status2_fg,bg=$color_status2_bg]"
default_color_status3="#[fg=$color_status3_fg,bg=$color_status3_bg]"

# Define widegets we're going to use.
widget_is_keys_off="#[fg=$color_status1_fg,bg=$color_window_off_indicator]#([ $(tmux show-option -qv key-table) = 'off' ] && echo 'OFF')#[default]"
widget_cpu="CPU:#{cpu_fg_color}#{cpu_percentage}#[default]"
widget_gpu="#(type nvidia-smi >/dev/null 2>&1 && echo 'GPU:#{gpu_fg_color}#{gpu_percentage} ')#[default]"
widget_date="%h %d %H:%M"
widget_user_host="#[fg=$color_status2_hl]#(whoami)#[fg=$color_status2_fg]@#H"
widget_battery="#{battery_status_fg}#{battery_icon} #{battery_percentage}"

# Format to display on the left-hand side of the status bar.
set-option -g status-left "$default_color_status3 #S \
#[fg=$color_status3_bg,bg=$color_status1_bg]#{?window_start_flag,,$separator_powerline1_right}"

# Format to display on the right-hand side of the status bar.
set-option -g status-right "\
#{prefix_highlight} $widget_is_keys_off \
#([ #{client_width} -gt 100 ] && echo '$widget_cpu $widget_gpu#{sysstat_mem} $separator_powerline2_left #[fg=$color_status1_hl]$widget_date ' )\
#[fg=$color_status2_bg,bg=$color_status1_bg]$separator_powerline1_left\
$default_color_status2 $widget_user_host \
#[fg=$color_status3_bg,bg=$color_status2_bg]$separator_powerline1_left\
$default_color_status3 $widget_battery #{online_status}$default_color_status3 "

# Online and offline icons for tmux-online-status.
set-option -g @online_icon "#[fg=$color_status3_hl]●#[default]"
set-option -g @offline_icon "#[fg=$color_level_stress]●#[default]"

# Configure view templates for tmux-plugin-sysstat "MEM" and "CPU" widget.
set-option -g @sysstat_mem_view_tmpl 'MEM:#[fg=#{mem.color}]#{mem.pused}#[default] #{mem.used}'

# Configure colors for "CPU" widget in tmux-cpu.
set-option -g @cpu_low_fg_color "#[fg=$color_level_ok]"
set-option -g @cpu_medium_fg_color "#[fg=$color_level_warn]"
set-option -g @cpu_high_fg_color "#[fg=$color_level_stress]"

# Configure colors for "GPU" widget in tmux-cpu.
set-option -g @gpu_low_fg_color "#[fg=$color_level_ok]"
set-option -g @gpu_medium_fg_color "#[fg=$color_level_warn]"
set-option -g @gpu_high_fg_color "#[fg=$color_level_stress]"

# Configure colors for "MEM" widget in tmux-plugin-sysstat.
set-option -g @sysstat_cpu_color_low "$color_level_ok"
set-option -g @sysstat_cpu_color_medium "$color_level_warn"
set-option -g @sysstat_cpu_color_stress "$color_level_stress"

set-option -g @sysstat_mem_color_low "$color_level_ok"
set-option -g @sysstat_mem_color_medium "$color_level_warn"
set-option -g @sysstat_mem_color_stress "$color_level_stress"

set-option -g @sysstat_swap_color_low "$color_level_ok"
set-option -g @sysstat_swap_color_medium "$color_level_warn"
set-option -g @sysstat_swap_color_stress "$color_level_stress"

# Configure tmux-battery widget colors.
set-option -g @batt_color_full_charge "#[fg=$color_status3_hl]"
set-option -g @batt_color_high_charge "#[fg=$color_status3_hl]"
set-option -g @batt_color_medium_charge "#[fg=$color_level_warn]"
set-option -g @batt_color_low_charge "#[fg=$color_level_stress]"

# Configure tmux-prefix-highlight colors.
set-option -g @prefix_highlight_output_prefix '['
set-option -g @prefix_highlight_output_suffix ']'
set-option -g @prefix_highlight_fg "$color_mode_highlight_fg"
set-option -g @prefix_highlight_bg "$color_mode_highlight_bg"
set-option -g @prefix_highlight_show_copy_mode 'on'
set-option -g @prefix_highlight_copy_mode_attr "fg=$color_mode_highlight_fg,bg=$color_mode_highlight_bg"

# Installation of plugins used in status bar.

# 'tmux-plugin-sysstat' provides a way to print CPU usage, memory &
# swap, load average, net I/O metrics. See:
# https://github.com/samoshkin/tmux-plugin-sysstat
set-option -g @plugin 'samoshkin/tmux-plugin-sysstat'

# 'tmux-battery' provides a way to display battery percentage and
# status icon. See: https://github.com/tmux-plugins/tmux-battery
set-option -g @plugin 'tmux-plugins/tmux-battery'

# 'tmux-cpu' provides a way to display CPU and GPU information, which
# can update more frequently than tmux-plugin-sysstat. See:
# https://github.com/tmux-plugins/tmux-cpu
set-option -g @plugin "tmux-plugins/tmux-cpu"

# 'tmux-online-status' provides a way to display online status for the
# host. See: https://github.com/tmux-plugins/tmux-online-status
set-option -g @plugin 'tmux-plugins/tmux-online-status'

# 'tmux-prefix-highlight' highlights when you press tmux prefix key.
# See: https://github.com/tmux-plugins/tmux-prefix-highlight
set-option -g @plugin 'tmux-plugins/tmux-prefix-highlight'


########################################################################
### Third-party plugins

# tmux-yank provides a feature to copy a text selected in copy-mode to
# the system clipboard.
#
### Keybindings ###
# Normal mode:
# <prefix> y       Copy text from the command line to the clipboard
# <prefix> Shift+y Copy the current pane's current working directory
#                  to the clipboard
# Copy mode:
#   y        Copy selection to the clipboard
#   Shift+y  Copy selection and paste it to the command line
set-option -g @plugin 'tmux-plugins/tmux-yank'

# tmux copycat provides regex searches, search result highlighting,
# predefined seaches, etc.
#
### Keybindings ###
# <prefix> /       Regex search
# <prefix> Ctrl+f  Simple file search
# <prefix> Ctrl+g  Jump over git status files (use after git status)
# <prefix> Alt+h   Jump over SHA-1 hashes (use after git log)
# <prefix> Ctrl+u  URL search
# <prefix> Ctrl+d  Number search
# <prefix> Alt+i   IP address search
# In copycat mode:
#   n             Jump to the next match
#   N             Jump to the previous match
# Ctrl+w / Alt+w  Copy highlighted match (emacs mode)
# Enter           Copy highlighted match (vi mode)
set-option -g @plugin 'tmux-plugins/tmux-copycat'

# tmux open provides a way to open highlighted selection directly from
# tmux copy mode.
#
### Keybindings ###
# In copy mode:
#   o        Open a highlighted selection with the default program
#   Ctrl+o   Open a highlighted selection with the $EDITOR
#   Shift+s  Google the hightlighted selection direclty
set-option -g @plugin 'tmux-plugins/tmux-open'
set-option -g @open-S 'https://www.google.com/search?q='


########################################################################
### Nesting local and remote sessions

# TODO: Nesting tmux sessions is not required right now for me. When
# time has come, see: https://github.com/samoshkin/tmux-config


########################################################################
###  Final process for the plugin manager

# Install plugins automatically when TPM has not installed yet.
if-shell 'test ! -d ~/.config/tmux/plugins/tpm' '         \
    run-shell "                                           \
        git clone                                         \
            https://github.com/tmux-plugins/tpm           \
            ~/.config/tmux/plugins/tpm                    \
        && ~/.config/tmux/plugins/tpm/bin/install_plugins \
    "'

run-shell "~/.config/tmux/plugins/tpm/tpm"
